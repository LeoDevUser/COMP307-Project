<head>
    <!-- schedule page made by Rachel Craite (Except Calendar) -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Schedule</title>
    <link rel="stylesheet" href="../css/stylesheet.css" type="text/css">
    <link rel="stylesheet" href="../css/schedule.css" type="text/css">
    <link rel="stylesheet" href="css/navbar.css">
    <link href="https://fonts.googleapis.com/css2?family=EB+Garamond&display=swap" rel="stylesheet">

</head>

<body>

    <!-- Navigation Bar -->
    <nav class="navbar">
        <div class="navbar-container">

            <div class="hamburger" id="hamburger-icon">
                <span class="bar"></span>
                <span class="bar"></span>
                <span class="bar"></span>
            </div>


           
            <ul class="nav-links" id="nav-links">
                <li><a href="../pdashboard" class="button_class_nav">Dashboard</a></li>
                <li><a href="../viewRequests" class="button_class_nav">View Requests</a></li>
                <li><a href="../delete" class="button_class_nav">Delete Entry?</a></li>


            </ul>
        </div>
    </nav>



    <div class="bottom-container" id="bottomContainer">
      <div class="tempSpace">
      </div>
    <div class="aside" id="root">
      <h1 style="font-size: 25px" class="heading">Fill out form to create new event!</h1>

      <form class="formApperance" id="myForm" onsubmit="return submitForm()">
        <h1>Label:
        <input type="text" name="appointmentLabel" class="textbox"></input></h1>
        <h1>Which Class? 
          <input type="text" name="class" class="textbox"></input></h1>
        <h1>When? <input type="date" name="start"></input></h1> 
        <h1>At: <select name="time">
            <option value="7">7:00 AM</option>
            <option value="8">8:00 AM</option>
            <option value="9">9:00 AM</option>
            <option value="10">10:00 AM</option>
            <option value="11">11:00 AM</option>
            <option value="12">12:00 PM</option>
            <option value="1">1:00 PM</option>
            <option value="2">2:00 PM</option>
            <option value="3">3:00 PM</option>
            <option value="4">4:00 PM</option>
            <option value="5">5:00 PM</option>
            <option value="6">6:00 PM</option>
            </select>


        </h1>
        <h1>For 
            <select name="hours">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                </select> Hours.</h1>
        
        <h1>How many Openings?</h1>
        <p><input type="radio" name="avaliblePositions" value="userInput"></input>
        <input type="text" name="userInputAvaliblePositions"class="textbox"></input>
        </p>
        <p><input type="radio" name="avaliblePositions" id="unlimitdPositions" value="unlimited"></input>
        <label for="unlimitdPositions"> Unlimited</label></p>
        
        <h1>Repeats?</h1>
        <p><input type="radio" name="repeats" id="unlimitdPositions" value="doesRepeat" onclick="revealHiddenObject()"></input> Yes <input type="radio" name="repeats" id="unlimitdPositions" value="doesNotRepeat" onclick="hideHiddenObject()""></input> No</p>

        
        <h1 id="hiddenDate">Repeats Until? <input type="date" name="end" id="reset"></input></h1> 
        <h1 id="hiddenDate"><input type="text" name="email" id="secretEmail"></input></h1> 


        <input type="submit" value="Submit" class="submitButton"></input>

      </form>
    </div>
    <div class="tempSpaceTwo">
    </div>

        <!-- Replace with calendar and need to figure out what to do at differnt sizes -->
    <div class="calendar-selector" style="width:65%;margin:auto">
      <%- include('calendar.ejs'); %>
    </div>
    </div>

    <script src="../js/calendar.js"></script>
    <script src="../js/navbar.js"></script>

    <script>
      //Reveals end date option
      function revealHiddenObject(){
          document.getElementById("hiddenDate").style.display = "block";
      }

      //hides end date option
      function hideHiddenObject(){
          document.getElementById("hiddenDate").style.display = "none";
          document.getElementById("reset").value = "";
      }

      function validateForm(){
        const x = document.getElementById("myForm").elements;

        if(x["appointmentLabel"].value == ""  || x["class"].value == ""
          || x["start"].value == "" || x["avaliblePositions"].value == ""
          || x["repeats"].value == ""
        ){
            alert("Form not fully filled out!");
            return false;

        }

        if(x["avaliblePositions"].value == "userInput" && x["userInputAvaliblePositions"].value == ""){
          alert("Form not fully filled out!");
          return false;
        }

        if(x["avaliblePositions"].value == "userInput" && (isNaN(x["userInputAvaliblePositions"].value))){
          alert("Must input a number for openings!");
          return false;
        }

        if(x["avaliblePositions"].value == "userInput" && (x["userInputAvaliblePositions"].value) < 1){
          alert("Number of openings cannot be negative!");
          return false;
        }

        if(x["repeats"].value == "doesRepeat" && x["end"].value == ""){
          alert("Form not fully filled out!");
          return false;
        }

        let curDate = new Date();
        curDate.setHours(0,0,0,0);

        let startDate = new Date(x["start"].value);
        if(startDate < curDate){
          alert("Cannot schedule an event in the past or today!");
          return false;
        }

        if(x["end"].value != ""){
          if(x["start"].value > x["end"].value){
          alert("An event's end can not occur sooner than its start!");
          return false;
        }
        }

        return true;
      }
      
      //Adds new schedule time and returns instance ID
      async function sendForm(u) {
      const response = await fetch(u);
      const json = await response.text();
      return json;
      }

      function submitForm(){
        if(validateForm() == false){
          return false;
        }
        const n = document.getElementById("myForm").elements;

        const addURL = `/add?appointmentLabel=${n["appointmentLabel"].value}&class=${n["class"].value}&start=${n["start"].value}&time=${n["time"].value}&hours=${n["hours"].value}&avaliblePositions=${n["avaliblePositions"].value}&userInputAvaliblePositions=${n["userInputAvaliblePositions"].value}&repeats=${n["repeats"].value}&end=${n["end"].value}&email=${n["email"].value}`;

        sendForm(addURL).then(x =>  {
        const bottomContainer = document.getElementById("bottomContainer");
        bottomContainer.innerHTML = "";
        bottomContainer.style.display = "block";

        bottomContainer.insertAdjacentHTML('beforeend', `<p>Send this link to your students, so they can directly RSVP for this event! </p>`);
        bottomContainer.insertAdjacentHTML('beforeend', `<p>http://localhost:3000/rsvp/?p=${x}</p>`);
        bottomContainer.insertAdjacentHTML('beforeend', `<p>Note: If this link is associated with a repeating event, it links to just the closest event</p>`);
        bottomContainer.insertAdjacentHTML('beforeend', `<p>Click here to add a new time: <a href="/schedule">Here!</a></p>`); //Note need to change getting email from token

        return false;
      });
        return false;
      }
      
      //Retrieves current user's email
      async function fetchUserEmail(){
        const response = await fetch(`/current_user`);
        const json = await response.json();
        return json;

      }
      
      fetchUserEmail().then( e => {
        const passEmail = document.getElementById("secretEmail");
        passEmail.value = e.email;
      });
  

  </script>





</body>
